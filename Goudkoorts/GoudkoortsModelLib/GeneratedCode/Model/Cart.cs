//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;

namespace Model
{
    public class Cart : MovingObject, IContainObject
    {
        public Cart(RailTile tile)
        {
            Tile = tile;
        }

        public virtual bool isEmpty { get; set; }

        public RailTile Tile { get; set; }

        public bool IsMoveAble()
        {
            if (Tile is ParkTile)
                return Tile.GetNext() != null;
            if (Tile is PortTile)
            {
                PortTile tile = Tile as PortTile;

                Unload(tile);

                if (!isEmpty) 
                    return false;

                return true;
            }
            else
                return true;
        }

        public override void Tick()
        {
            if (IsMoveAble())
                Move();
        }

        public override void Move()
        {
            dynamic nextTile = Tile.GetNext();

            if (nextTile == null)
                Despawn();
            else
            {
                if (nextTile.IsOccupied() && CanMoveTo(nextTile))
                {
                    Tile.Board.Game.GameOver();
                    return;
                }

                if (!nextTile.IsOccupied() && CanMoveTo(nextTile))
                {
                    Tile.Contain = null;
                    nextTile.Contain = this;
                    this.Tile = nextTile;
                }
            }
        }

        public void Despawn()
        {
            Tile.Contain = null; 
        }

        private bool CanMoveTo(RailTile nextTile)
        {
            if (nextTile.Direction == null) nextTile.Direction = Tile.Direction;
            return true;
        }

        private bool CanMoveTo(SwitchTile tile)
        {
            // Check if tile switch is open
            return Tile.Direction.x != 0 && Tile.Direction.y == 0 || Tile.Direction.y != tile.OpenSide.y;
        }


        private void Unload(PortTile tile)
        {
            SailTile boatTile = Tile.Board.Field.Get<SailTile>(new Point(tile.Coords.x, Tile.Coords.y - 1));

            if (boatTile.Contain == null)
                return;

            Boat Boat = (Boat)boatTile.Contain;
            Boat.addCargo();
            this.isEmpty = true;

        }

        private bool CanMoveTo(ParkTile tile)
        {
            // Can only be placed in line
            if (tile.Direction == null) tile.Direction = Tile.Direction; // Set same direction as current
            return true;
        }
    }
}