//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Helper;

namespace Model
{
    public class Board
    {
        public const string Level = "goudkoortsmap.txt";

        public Board()
        {
            Field = new DynamicDoubleList<Tile>();
        }

        public virtual DynamicDoubleList<Tile> Field { get; set; }

        public virtual IEnumerable<Tile> Vak { get; set; }

        public virtual IEnumerable<Storage> Loods { get; set; }

        public virtual Game Game { get; set; }

        public static Board Generate()
        {
            var board = new Board();
            var enumerator = FileParser.readFileLines(Level).GetEnumerator();

            var y = 0;
            while (enumerator.MoveNext())
            {
                var x = 0;
                foreach (var c in enumerator.Current)
                {
                    var p = new Point(x, y);
                    var tile = Tile.Create(c, p);

                    tile.Board = board; // set parent

                    board.Field[x, y] = tile; // Add to the field

                    x++;
                }
                y++;
            }

            // Clean
            enumerator.Dispose();

            // Determ direction
//            foreach (var row in board.Field)
//		    {
//		        foreach (Tile tile in row)
//		        {
//		            if (tile.Contain is Storage)
//		            {
//                        RailTile next = tile.Next<RailTile>();
//                        next.Direction = Point.Right;
//                        do
//		                {
//		                    next = next.Next<RailTile>();
//                            next.Direction = Point.Right;
//                        } while (next != null);
//		                return board;
//		            }
//		        }
//		    }

            return board;
        }

        public Tile GetTile(Point p)
        {
            return Field[p.x, p.y];
        }

        public void Lock()
        {
        }
    }
}