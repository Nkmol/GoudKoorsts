//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Runtime.CompilerServices;
using System.Collections.Generic;
using Helper;
using Process;

namespace Model
{

	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;

	public class Board
	{
		public virtual DynamicDoubleList<Tile> Field
		{
			get;
			set;
		}

        public static Dictionary<int, SwitchTile> Switches
        {
            get;
            set;
        }

        public virtual IEnumerable<Tile> Vak
		{
			get;
			set;
		}

		public virtual IEnumerable<Storage> Loods
		{
			get;
			set;
		}

		public virtual Game Game
		{
			get;
			set;
		}

	    public Board()
	    {
	        Field = new DynamicDoubleList<Tile>();
	    }

	    public const string Level = "goudkoortsmap.txt";

		public static Board Generate()
		{

            Board board = new Board();
            Switches = new Dictionary<int, SwitchTile>();
		    var enumerator = FileParser.readFileLines(Level).GetEnumerator();
		    int keyCounter = 0;

		    int y = 0;
		    while (enumerator.MoveNext())
		    {
		        int x = 0;
		        foreach (char c in enumerator.Current)
		        {
		            Point p = new Point(x, y);
		            Tile tile = Tile.Create(c, p);

		            tile.Board = board; // set parent
                    

		            if (tile is SwitchTile)  // check if Tile belongs to the switches
		            {
		                SwitchTile switchTile = (SwitchTile)tile;
                        Switches.Add(keyCounter++, switchTile); // increase the counter to fetch the next key
		            }

		            board.Field[x, y] = tile; // Add to the field
=======
    public class Board
    {
        public const string Level = "goudkoortsmap.txt";

        public Board()
        {
            Field = new DynamicDoubleList<Tile>();
        }

        public virtual DynamicDoubleList<Tile> Field { get; set; }

        public virtual IEnumerable<Tile> Vak { get; set; }

        public virtual IEnumerable<Storage> Loods { get; set; }

        public virtual Game Game { get; set; }

        public static Board Generate()
        {
            var board = new Board();
            var enumerator = FileParser.readFileLines(Level).GetEnumerator();

            var y = 0;
            while (enumerator.MoveNext())
            {
                var x = 0;
                foreach (var c in enumerator.Current)
                {
                    var p = new Point(x, y);
                    var tile = Tile.Create(c, p);

                    tile.Board = board; // set parent

                    board.Field[x, y] = tile; // Add to the field
>>>>>>> ee55b8f88269ba1ed3ac1731d94102607ebcb746

                    x++;
                }
                y++;
            }

            // Clean
            enumerator.Dispose();

            // Determ direction
//            foreach (var row in board.Field)
//		    {
//		        foreach (Tile tile in row)
//		        {
//		            if (tile.Contain is Storage)
//		            {
//                        RailTile next = tile.Next<RailTile>();
//                        next.Direction = Point.Right;
//                        do
//		                {
//		                    next = next.Next<RailTile>();
//                            next.Direction = Point.Right;
//                        } while (next != null);
//		                return board;
//		            }
//		        }
//		    }

            return board;
        }

        public Tile GetTile(Point p)
        {
            return Field[p.x, p.y];
        }

        public void Lock()
        {
        }
    }
}
